import { useState, useCallback, useEffect } from 'react';

const audioSrc = "data:audio/mpeg;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjQ1LjEwMAAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWW5mbwAAAAwAAAABAAAIoAAAA2AAZHVyYXRpb24AAAAAAAABAaVoVVJMAAAAAAAAADkxNjYxMzY2OTM4NzQ2Nzc0Nzk3OTg0OTA3OTc5ODU5OTU4OTc5NzM5NDM5NzI5NzM5NDU5NDI5NzI5NzI5NzI5NzI5NzI5NzI5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//tAwRAAAAGkAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwR4AABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwSgAABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwSwAABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwTAAABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwTQAABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwTgAABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwT4AABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwUAAABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwUQAABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwUoAABpAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwUwgAApAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwU4AAA5AAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg//tAwU8AAADgAAAAAAAAABAAAAP+2TBikgAAAAjgADhQAAASwAFA4AAAAAAAABqg5wARgAFBIAAAAAAFYAAAAEAACg";

const useSounds = (soundEnabled: boolean) => {
  // Use state to hold the audio object, ensuring it's created only once.
  const [audio] = useState(new Audio(audioSrc));

  useEffect(() => {
    // Preload the audio when the component mounts
    audio.preload = 'auto';
    audio.load();
  }, [audio]);

  // A robust method to unlock audio context on the first user interaction.
  const primeAudio = useCallback(() => {
    audio.muted = true;
    audio.play().catch(() => {
      // This is expected to fail silently on some browsers
      // until a real user interaction, but it helps "prime" the audio element.
    });
  }, [audio]);

  const playTick = useCallback(async () => {
    if (soundEnabled && audio) {
      try {
        // Ensure audio is unmuted for playback
        audio.muted = false;
        audio.currentTime = 0;
        await audio.play();
      } catch (error) {
        console.error("Error playing sound:", error);
        // On failure, subsequent plays might require a new user interaction.
        // The primeAudio on next click should help.
      }
    }
  }, [soundEnabled, audio]);

  return { playTick, primeAudio };
};

export default useSounds;